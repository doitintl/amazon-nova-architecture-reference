{
  "openapi": "3.0.0",
  "info": {
    "title": "Booking API",
    "description": "API for managing bookings. Use customer_name as the main identifier for all operations. If multiple bookings are found for a customer, the user will be asked to clarify. If only one booking is found, the operation will proceed automatically.",
    "version": "1.0.0"
  },
  "paths": {
    "/getBooking": {
      "get": {
        "summary": "Get booking details by ID",
        "description": "Retrieves the details of a booking by its unique booking_id.",
        "operationId": "getBooking",
        "parameters": [
          {
            "name": "booking_id",
            "in": "query",
            "description": "Unique 5-character alphanumeric ID of the booking to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/createBooking": {
      "post": {
        "summary": "Create a new booking",
        "description": "Creates a new booking for a customer. The customer_name is required. Other details such as booking_date, service_type, status, and notes are optional. The booking_id will be generated automatically as a 5-character alphanumeric string.",
        "operationId": "createBooking",
        "requestBody": {
          "description": "Booking details. Must include customer_name. Other fields are optional.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingCreated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/updateBooking": {
      "put": {
        "summary": "Update an existing booking by customer name or ID",
        "description": "Updates an existing booking. You can update by booking_id or by customer_name. If booking_id is not provided, all bookings for the given customer_name will be considered. If multiple bookings are found, the user will be asked to clarify. If only one booking is found, it will be updated automatically.",
        "operationId": "updateBooking",
        "parameters": [
          {
            "name": "booking_id",
            "in": "query",
            "description": "Unique 5-character alphanumeric ID of the booking to update. If not provided, customer_name must be specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_name",
            "in": "query",
            "description": "Name of the customer whose bookings to update. If booking_id is not provided, all bookings for this customer will be considered.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated booking details. Only fields to be updated need to be provided.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking(s) updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingUpdated"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/deleteBooking": {
      "delete": {
        "summary": "Delete a booking by customer name or ID",
        "description": "Deletes a booking by its booking_id or by customer_name. If booking_id is not provided, all bookings for the given customer_name will be considered. If multiple bookings are found, the user will be asked to clarify. If only one booking is found, it will be deleted automatically.",
        "operationId": "deleteBooking",
        "parameters": [
          {
            "name": "booking_id",
            "in": "query",
            "description": "Unique 5-character alphanumeric ID of the booking to delete. If not provided, customer_name must be specified.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer_name",
            "in": "query",
            "description": "Name of the customer whose bookings to delete. If booking_id is not provided, all bookings for this customer will be considered.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDeleted"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/listBookings": {
      "get": {
        "summary": "List all bookings",
        "description": "Retrieves a list of all bookings. Optionally limit the number of results returned.",
        "operationId": "listBookings",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of bookings to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookings retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingList"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/findBookingsByCustomer": {
      "get": {
        "summary": "Find bookings by customer name",
        "description": "Retrieves bookings that match the given customer_name. If multiple bookings are found, the user will be asked to clarify. If only one booking is found, the operation will proceed automatically.",
        "operationId": "findBookingsByCustomer",
        "parameters": [
          {
            "name": "customer_name",
            "in": "query",
            "description": "Name of the customer to search for. Case-insensitive substring match.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookings retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingList"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Booking": {
        "type": "object",
        "properties": {
          "booking_id": {
            "type": "string",
            "description": "Unique 5-character alphanumeric identifier for the booking."
          },
          "customer_name": {
            "type": "string",
            "description": "Name of the customer. Used as the main identifier for all operations."
          },
          "booking_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the booking."
          },
          "service_type": {
            "type": "string",
            "description": "Type of service booked."
          },
          "status": {
            "type": "string",
            "description": "Status of the booking (confirmed, pending, cancelled, completed).",
            "enum": ["confirmed", "pending", "cancelled", "completed"]
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the booking."
          }
        },
        "required": ["booking_id"]
      },
      "BookingInput": {
        "type": "object",
        "properties": {
          "customer_name": {
            "type": "string",
            "description": "Name of the customer. Required for all operations."
          },
          "booking_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the booking."
          },
          "service_type": {
            "type": "string",
            "description": "Type of service booked."
          },
          "status": {
            "type": "string",
            "description": "Status of the booking (confirmed, pending, cancelled, completed).",
            "enum": ["confirmed", "pending", "cancelled", "completed"],
            "default": "pending"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the booking."
          }
        },
        "required": ["customer_name"]
      },
      "BookingUpdate": {
        "type": "object",
        "properties": {
          "customer_name": {
            "type": "string",
            "description": "Name of the customer."
          },
          "booking_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the booking."
          },
          "service_type": {
            "type": "string",
            "description": "Type of service booked."
          },
          "status": {
            "type": "string",
            "description": "Status of the booking (confirmed, pending, cancelled, completed).",
            "enum": ["confirmed", "pending", "cancelled", "completed"]
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the booking."
          }
        }
      },
      "BookingCreated": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message."
          },
          "booking_id": {
            "type": "string",
            "description": "ID of the created booking."
          }
        }
      },
      "BookingUpdated": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message."
          },
          "updated_attributes": {
            "type": "object",
            "description": "Updated attributes."
          }
        }
      },
      "BookingDeleted": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message."
          }
        }
      },
      "BookingList": {
        "type": "object",
        "properties": {
          "bookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Booking"
            }
          },
          "count": {
            "type": "integer",
            "description": "Number of bookings returned."
          },
          "scanned_count": {
            "type": "integer",
            "description": "Total number of bookings scanned."
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message."
          }
        }
      }
    }
  }
}